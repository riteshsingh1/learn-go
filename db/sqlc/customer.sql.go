// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: customer.sql

package db

import (
	"context"
	"database/sql"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customer (
  customer_id, created_at, bank_name, ifsc, account_number, active
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, customer_id, created_at, bank_name, ifsc, account_number, active
`

type CreateCustomerParams struct {
	CustomerID    string         `json:"customer_id"`
	CreatedAt     sql.NullTime   `json:"created_at"`
	BankName      sql.NullString `json:"bank_name"`
	Ifsc          sql.NullString `json:"ifsc"`
	AccountNumber sql.NullString `json:"account_number"`
	Active        sql.NullBool   `json:"active"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer,
		arg.CustomerID,
		arg.CreatedAt,
		arg.BankName,
		arg.Ifsc,
		arg.AccountNumber,
		arg.Active,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.CreatedAt,
		&i.BankName,
		&i.Ifsc,
		&i.AccountNumber,
		&i.Active,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customer
WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, id)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, customer_id, created_at, bank_name, ifsc, account_number, active FROM customer
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, id int64) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.CreatedAt,
		&i.BankName,
		&i.Ifsc,
		&i.AccountNumber,
		&i.Active,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, customer_id, created_at, bank_name, ifsc, account_number, active FROM customer
ORDER BY id
`

func (q *Queries) ListCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.QueryContext(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.CreatedAt,
			&i.BankName,
			&i.Ifsc,
			&i.AccountNumber,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customer
set customer_id = $2,
bank_name = $3,
ifsc = $4,
account_number = $5,
active = $6
WHERE id = $1
RETURNING id, customer_id, created_at, bank_name, ifsc, account_number, active
`

type UpdateCustomerParams struct {
	ID            int64          `json:"id"`
	CustomerID    string         `json:"customer_id"`
	BankName      sql.NullString `json:"bank_name"`
	Ifsc          sql.NullString `json:"ifsc"`
	AccountNumber sql.NullString `json:"account_number"`
	Active        sql.NullBool   `json:"active"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, updateCustomer,
		arg.ID,
		arg.CustomerID,
		arg.BankName,
		arg.Ifsc,
		arg.AccountNumber,
		arg.Active,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.CreatedAt,
		&i.BankName,
		&i.Ifsc,
		&i.AccountNumber,
		&i.Active,
	)
	return i, err
}

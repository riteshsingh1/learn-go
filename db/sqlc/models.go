// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type ModeVal string

const (
	ModeValIMPS ModeVal = "IMPS"
	ModeValNEFT ModeVal = "NEFT"
)

func (e *ModeVal) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ModeVal(s)
	case string:
		*e = ModeVal(s)
	default:
		return fmt.Errorf("unsupported scan type for ModeVal: %T", src)
	}
	return nil
}

type NullModeVal struct {
	ModeVal ModeVal
	Valid   bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullModeVal) Scan(value interface{}) error {
	if value == nil {
		ns.ModeVal, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ModeVal.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullModeVal) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.ModeVal, nil
}

type StatusVal string

const (
	StatusValREQUESTSUBMITTED   StatusVal = "REQUEST_SUBMITTED"
	StatusValPAYMENTTRANSFERRED StatusVal = "PAYMENT_TRANSFERRED"
	StatusValPAYMENTFAILED      StatusVal = "PAYMENT_FAILED"
	StatusValPAYMENTSETTELED    StatusVal = "PAYMENT_SETTELED"
)

func (e *StatusVal) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StatusVal(s)
	case string:
		*e = StatusVal(s)
	default:
		return fmt.Errorf("unsupported scan type for StatusVal: %T", src)
	}
	return nil
}

type NullStatusVal struct {
	StatusVal StatusVal
	Valid     bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatusVal) Scan(value interface{}) error {
	if value == nil {
		ns.StatusVal, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StatusVal.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatusVal) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.StatusVal, nil
}

type TransactionType string

const (
	TransactionTypeCREDIT TransactionType = "CREDIT"
	TransactionTypeDEBIT  TransactionType = "DEBIT"
)

func (e *TransactionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionType(s)
	case string:
		*e = TransactionType(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionType: %T", src)
	}
	return nil
}

type NullTransactionType struct {
	TransactionType TransactionType
	Valid           bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionType) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.TransactionType, nil
}

type Customer struct {
	ID            int64          `json:"id"`
	CustomerID    string         `json:"customer_id"`
	CreatedAt     sql.NullTime   `json:"created_at"`
	BankName      sql.NullString `json:"bank_name"`
	Ifsc          sql.NullString `json:"ifsc"`
	AccountNumber sql.NullString `json:"account_number"`
	Active        sql.NullBool   `json:"active"`
}

type PayoutOrder struct {
	ID                    int64           `json:"id"`
	CustomerID            string          `json:"customer_id"`
	Amount                sql.NullFloat64 `json:"amount"`
	BankName              sql.NullString  `json:"bank_name"`
	AccountNumber         sql.NullString  `json:"account_number"`
	Ifsc                  sql.NullString  `json:"ifsc"`
	CreatedAt             sql.NullTime    `json:"created_at"`
	Status                NullStatusVal   `json:"status"`
	BankTransactionNumber sql.NullString  `json:"bank_transaction_number"`
	TransactionNumber     sql.NullString  `json:"transaction_number"`
	Mode                  NullModeVal     `json:"mode"`
	UtrNumber             sql.NullString  `json:"utr_number"`
	Reason                sql.NullString  `json:"reason"`
}

type PayoutOrderDetail struct {
	ID                    int64          `json:"id"`
	TransactionNumber     sql.NullString `json:"transaction_number"`
	PayoutOrderId         sql.NullInt64  `json:"payoutOrderId"`
	Responsecode          string         `json:"responsecode"`
	UtrNumber             sql.NullString `json:"utr_number"`
	BankTransactionNumber sql.NullString `json:"bank_transaction_number"`
	Status                NullStatusVal  `json:"status"`
	UniqueID              sql.NullString `json:"unique_id"`
}

type Vault struct {
	ID         sql.NullInt64   `json:"id"`
	CustomerID sql.NullString  `json:"customer_id"`
	Gold       sql.NullFloat64 `json:"gold"`
	Silver     sql.NullFloat64 `json:"silver"`
	CreatedAt  sql.NullTime    `json:"created_at"`
	UpdatedAt  sql.NullTime    `json:"updatedAt"`
}

type VaultTransaction struct {
	ID              sql.NullInt64       `json:"id"`
	CustomerID      sql.NullString      `json:"customer_id"`
	Amount          sql.NullFloat64     `json:"amount"`
	TransactionType NullTransactionType `json:"transaction_type"`
	CreatedAt       sql.NullTime        `json:"created_at"`
}

type Wallet struct {
	ID         int64           `json:"id"`
	CustomerID sql.NullString  `json:"customer_id"`
	Amount     sql.NullFloat64 `json:"amount"`
	CreatedAt  sql.NullTime    `json:"created_at"`
	UpdatedAt  sql.NullTime    `json:"updatedAt"`
}

type WalletTransaction struct {
	ID              sql.NullInt64       `json:"id"`
	CustomerID      sql.NullString      `json:"customer_id"`
	Amount          sql.NullFloat64     `json:"amount"`
	TransactionType NullTransactionType `json:"transaction_type"`
	CreatedAt       sql.NullTime        `json:"created_at"`
}
